<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Seat Management - SpaceWise</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    .seat-list li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px;
      background: #f9fafb;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 6px;
    }
    .toggle-btn {
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
    }
    .available { background: #28bf4e; color: white; } /* Green */
    .unavailable { background: #fbbf24; color: white; } /* Warning Orange */
  </style>
</head>
<body class="bg-gray-100">
  <!-- Navbar -->
  <header class="bg-white shadow-md">
    <div class="container mx-auto flex items-center justify-between py-4 px-6">
      <div class="flex items-center space-x-2">
        <a href="/home">
          <!-- Clickable Logo -->
          <span class="text-xl font-semibold">êåÇ SpaceWise</span>
        </a>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto py-10 px-6">
    <h2 class="text-2xl font-semibold mb-6">Manage Space: <%= space.space_name %></h2>

    <div class="bg-white p-6 shadow-md rounded-lg">
      <!-- Edit Space Name -->
      <h3 class="text-xl font-semibold mb-4">Space Name</h3>
      <input type="text" id="spaceName" placeholder="Enter space name" class="block w-full p-2 border rounded mb-4">

      <!-- Layout Preview -->
      <h3 class="text-xl font-semibold mb-4">Preview Layout</h3>
      <div class="p-4 bg-gray-50 border rounded-md mb-4">
        <p class="text-gray-600 text-sm">Preview the space layout as seen by students.</p>
        <div id="layoutPreviewContainer" class="mt-4 bg-gray-200 h-64 flex items-center justify-center">
          <% if (space.layout_image) { %>
            <img id="spacePreview" src="<%= space.layout_image %>" alt="Space Layout" class="w-full h-full object-contain">
          <% } else { %>
              <span id="previewPlaceholder" class="text-gray-500">No layout available.</span>
          <% } %>
        </div>
      </div>

      <!-- Upload Layout -->
      <h3 class="text-xl font-semibold mb-4">Upload Layout</h3>
      <input type="file" id="layoutUpload" name="layoutImage" class="mt-2 block w-full p-2 border rounded-md mb-6">

      <!-- Save and Discard Buttons -->
      <div class="mt-6 flex">
        <button id="saveChangesBtn" class="px-4 py-2 bg-blue-600 text-white rounded">Save Changes</button>
        <button id="discardChangesBtn" class="ml-4 px-4 py-2 bg-red-600 text-white rounded">Discard Changes</button>
      </div>

      <!-- Seat Management -->
      <h3 class="text-xl font-semibold mt-6 mb-4">Seat Management</h3>
      <div class="mb-6">
        <label for="seatLabel" class="block text-sm font-medium">Seat Label (e.g., A1, B2)</label>
        <input type="text" id="seatLabel" placeholder="Enter seat label" class="block w-full p-2 border rounded mb-4">

        <label for="seatType" class="block text-sm font-medium mt-2">Seat Type</label>
        <select id="seatType" class="block w-full p-2 border rounded mb-4">
          <option value="chair">Chair</option>
          <option value="desk">Desk</option>
          <option value="sofa">Sofa</option>
        </select>

        <label class="block text-sm font-medium mt-2">Facilities</label>
        <div class="flex flex-wrap mb-4">
          <label class="flex items-center mr-4"><input type="checkbox" name="facility" value="outlet" class="mr-2"> Outlet</label>
          <label class="flex items-center mr-4"><input type="checkbox" name="facility" value="lamp" class="mr-2"> Lamp</label>
          <label class="flex items-center"><input type="checkbox" name="facility" value="desk-light" class="mr-2"> Desk Light</label>
        </div>

        <button id="addSeatBtn" class="px-4 py-2 bg-green-600 text-white rounded">Add Seat</button>
      </div>
      
      <!-- Seat List -->
      <h3 class="text-xl font-semibold mt-6 mb-4">Seat List</h3>
      <ul id="seatList" class="seat-list mb-4">
        <% seats.forEach(seat => { %>
          <li class="p-2 bg-white border rounded-md mb-2 flex justify-between items-center" data-seat-id="<%= seat.seat_id %>">
            <span><strong><%= seat.seat_name %></strong> - <%= seat.type %> (<%= seat.facilities || "No Facilities" %>)</span>
            <div class="flex space-x-2">
              <button class="toggleStatus <%= seat.status === 'available' ? 'available' : 'unavailable' %> toggle-btn" 
                data-seat-id="<%= seat.seat_id %>" 
                data-status="<%= seat.status %>">
                <%= seat.status === 'available' ? 'Available' : 'Unavailable' %>
              </button>
              <button class="deleteSeat bg-red-500 text-white px-3 py-1 rounded" 
                data-seat-id="<%= seat.seat_id %>">Delete
              </button>
            </div>
          </li>
          <% }); %>
      </ul>

      <button id="clearSeatsBtn" class="mt-4 px-4 py-2 bg-yellow-600 text-white rounded">Remove All Seats</button>
    </div>
  </main>
  
  <script>
    const institutionId = '<%= space.institution_id %>';
    const spaceId = '<%= space.space_id %>';

    // Layout Upload Preview
    document.getElementById('layoutUpload').addEventListener('change', function (event) {
      const file = event.target.files[0];
      if (!file) return; // No file selected (user canceled), do nothing

      // Show "Loading..." immediately
      const previewContainer = document.getElementById('layoutPreviewContainer');
      previewContainer.innerHTML = '<span class="text-gray-500">Loading layout...</span>';

      const reader = new FileReader();
      reader.onload = function () {
        const newImg = document.createElement("img");
        newImg.id = "spacePreview";
        newImg.src = reader.result;
        newImg.classList.add("w-full", "h-full", "object-contain");

        newImg.onload = function () {
          previewContainer.innerHTML = ''; // Clear "Loading..."
          previewContainer.appendChild(newImg); // Display new image
        };
      }
      reader.readAsDataURL(file);
    });

    document.getElementById('saveChangesBtn').addEventListener('click', function () {
      const spaceName = document.querySelector('#spaceName')?.value || '<%= space.space_name %>';
      const layoutFile = document.getElementById('layoutUpload').files[0];

      // Prepare FormData for space name and layout image
      const formData = new FormData();
      formData.append('spaceName', spaceName);
      if (layoutFile) { // New file uploaded
        formData.append('layoutImage', layoutFile);
      }

      fetch(`/institutions/${institutionId}/spaces/${spaceId}`, {
        method: 'PATCH',
        body: formData
      })
      .then(response => {
        if (!response.ok) throw new Error('Failed to save changes.');
        return response.json();
      })
      .then(data => {
        alert('Changes saved successfully!');
        document.querySelector('h2').textContent = 'Manage Space: ' + spaceName;
        if (layoutFile) {
          document.getElementById('spacePreview').src = URL.createObjectURL(layoutFile);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Failed to save changes. Please try again.');
      });
    });

    document.getElementById('discardChangesBtn').addEventListener('click', function () {
      if (confirm('Are you sure you want to discard all changes?')) {
        location.reload(); // Reloads the page to revert all unsaved changes
      }
    });

    function addSeatEventListeners(seatItem) {
      // Toggle Seat Status
      seatItem.querySelector(".toggleStatus").addEventListener("click", function () {
        const seatId = seatItem.dataset.seatId;
        const newStatus = this.classList.contains("available") ? "unavailable" : "available";

        fetch(`/institutions/${institutionId}/spaces/${spaceId}/seats/${seatId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: newStatus })
        })
        .then(res => res.json())
        .then(() => {
          this.classList.toggle("available");
          this.classList.toggle("unavailable");
          this.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
          this.dataset.status = newStatus;
        })
        .catch(error => alert(error.message));
      });

      // Delete Seat
      seatItem.querySelector(".deleteSeat").addEventListener("click", function () {
        const seatId = seatItem.dataset.seatId;
        if (confirm("Are you sure you want to delete this seat?")) {
          fetch(`/institutions/${institutionId}/spaces/${spaceId}/seats/${seatId}`, {
            method: 'DELETE'
          })
          .then(res => res.json())
          .then(() => {
            seatItem.remove(); // Remove the seat from the UI
          })
          .catch(error => alert(error.message));
        }
      });
    }

    // Attach event listeners for existing seats
    document.querySelectorAll('#seatList li').forEach(seatItem => {
      addSeatEventListeners(seatItem);
    });

    // Add Seat
    document.getElementById('addSeatBtn').addEventListener('click', function () {
      const seatLabel = document.getElementById('seatLabel').value.trim();
      const seatType = document.getElementById('seatType').value;
      const facilities = [...document.querySelectorAll('input[name="facility"]:checked')].map(f => f.value);
      const seatStatus = "available";

      if (!seatLabel) {
          alert("Please enter a seat label.");
          return;
      }

      fetch(`/institutions/${institutionId}/spaces/${spaceId}/seats`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          seat_name: seatLabel,
          type: seatType,
          facilities: facilities.join(','), // Convert array to string
          status: seatStatus
        })
      })
      .then(res => res.json())
      .then(response => {
        const seatList = document.getElementById('seatList');

        // Create list item
        const seatItem = document.createElement("li");
        seatItem.className = "p-2 bg-white border rounded-md mb-2 flex justify-between items-center";
        seatItem.innerHTML = `
          <span><strong>${seatLabel}</strong> - ${seatType} (${facilities.join(", ") || "No Facilities"})</span>
          <div class="flex space-x-2">
            <button class="toggleStatus available toggle-btn" data-seat-id="${response.seat_id}" data-status="${seatStatus}">
              Available
            </button>
            <button class="deleteSeat bg-red-500 text-white px-3 py-1 rounded" data-seat-id="${response.seat_id}">
              Delete
            </button>
          </div>
        `;

        addSeatEventListeners(seatItem); // Attach event listeners to the new seat
        seatList.appendChild(seatItem);
      })
      .catch(error => console.error('Error:', error));
    });

    document.getElementById('clearSeatsBtn').addEventListener('click', function () {
      if (confirm("Are you sure you want to remove all seats? This action cannot be undone.")) {
        fetch(`/institutions/${institutionId}/spaces/${spaceId}/seats`, {
          method: 'DELETE'
        })
        .then(res => {
          if (!res.ok) throw new Error("Failed to clear seats.");
          return res.json();
        })
        .then(() => {
          document.getElementById('seatList').innerHTML = ""; // Clear UI if successful
        })
        .catch(error => alert(error.message));
      }
    });

  </script>
</body>
</html>
